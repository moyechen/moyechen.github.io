import{_ as e,a as s}from"./20200216004851429_31590-CNIZ4Se5.js";import{_ as o,o as c,c as t,d}from"./app-CFIaTHNp.js";const p="/assets/20200216005034283_6861-CGhUdO8L.png",a="/assets/20200216164012830_18992-Dgnj9ORE.png",i="/assets/20200216001653735_883-hA2Slynl.png",r="/assets/20200216153319843_23184-DdmVH447.png",n="/assets/20200216153545000_7574-7geZnQYc.png",l="/assets/20200216153609444_2629-CLFqF_Xq.png",m="/assets/20200216154035988_9536-DTYtLsvJ.png",_="/assets/20200216154144431_6911-BI95hc3n.png",h="/assets/20200216154222027_24290-Dr-1PLiV.png",u="/assets/20200216154335434_2501-BK3ADJRN.png",g="/assets/20200216154747896_13220-BoFeYgLU.png",v="/assets/20200216154959017_19426-BcOSO-Mx.png",b="/assets/20200216161057865_16709-BCn5xazI.png",x="/assets/20200216161132880_26553-DT1yB_NI.png",q="/assets/20200216161321957_23988-OBttsw-A.png",f="/assets/20200216162855158_2094-CvkUGK_9.png",k={},C=d('<h1 id="vscode替代codeblocks" tabindex="-1"><a class="header-anchor" href="#vscode替代codeblocks" aria-hidden="true">#</a> vscode替代codeblocks</h1><table><thead><tr><th>时间</th><th>作者</th></tr></thead><tbody><tr><td>2020/2/16 16:54</td><td>moyechen</td></tr></tbody></table><p>code block 这款ide在acm比赛中非常常见, 但是鉴于本人有以下需求</p><ul><li>代码补全</li><li>一个方便的文件管理树</li><li>自定义代码模板</li><li>编译后生成的可执行文件(.exe) 定时清理</li></ul><p>因此,本人折腾了文本编辑器 -- vscode</p><h2 id="准备工作" tabindex="-1"><a class="header-anchor" href="#准备工作" aria-hidden="true">#</a> 准备工作</h2><p>首先下载vscode</p><p>官网链接: https://code.visualstudio.com/</p><p>接着,将编译器的目录添加到环境变量 如果你有code::blocks 可以参考以下:</p><p>打开code::blocks</p><p><img src="'+p+'" alt=""></p><p><img src="'+a+'" alt=""></p><p>复制蓝色内容,然后加上<code>\\bin</code></p><p>例如 <code>C:\\Program Files (x86)\\CodeBlocks\\MinGW\\bin</code> , 记为<code>compiler_path</code>变量</p><p>接着,添加到系统环境变量 <img src="'+i+'" alt=""></p><p>这里, 第六步我们输入 <code>C:\\Program Files (x86)\\CodeBlocks\\MinGW\\bin</code> (如果你的code::block是默认安装的话,否则,请你使用刚刚拼接的字符串<code>compilar_path</code>)</p><p>如果你没有code::block, 请你自行将g++编译器添加到环境变量</p><h3 id="测试编译器是否可用" tabindex="-1"><a class="header-anchor" href="#测试编译器是否可用" aria-hidden="true">#</a> 测试编译器是否可用</h3><p>按住win键,然后输入r,在弹出的框中输入cmd <img src="'+e+'" alt=""></p><p>此时会打开一个黑框框</p><p>输入g++</p><p>如果出现下图,这说明编译器准备完毕</p><p><img src="'+s+'" alt=""></p><h2 id="vscode配置" tabindex="-1"><a class="header-anchor" href="#vscode配置" aria-hidden="true">#</a> vscode配置</h2><h3 id="插件安装" tabindex="-1"><a class="header-anchor" href="#插件安装" aria-hidden="true">#</a> 插件安装</h3><p>安装好后, 点击左侧栏第5个按钮,依次安装下方3个插件</p><p>▼ <code>code runner</code> (在输入框输入code runner进行搜索)</p><p><img src="'+r+'" alt=""></p><p>▼<code>中文插件</code></p><p>在输入框输入 <code>chinese</code> 进行搜索</p><p><img src="'+n+'" alt=""></p><p>以及 <code>C/C++</code> 插件</p><p><img src="'+l+'" alt=""></p><p><strong>提示</strong>: 安装完毕后, 请重新启动vscode</p><h3 id="vscode-初体验" tabindex="-1"><a class="header-anchor" href="#vscode-初体验" aria-hidden="true">#</a> vscode 初体验</h3><p>重启过后, 我们打开一个文件夹</p><p><img src="'+m+'" alt=""></p><p>然后右键,新建文件,输入文件名,这里我输入的是test.cpp</p><p><img src="'+_+'" alt=""></p><p>接着,我们输入一个测试代码,可以看到, vscode已经可以智能补全了</p><p><img src="'+h+'" alt=""><img src="'+u+'" alt=""></p><p>输入完毕后, 右击输入区域, 点击第一项 <code>Run Code</code> ,可以在下方看到输出</p><p><img src="'+g+'" alt=""></p><p>这表示我们已经可以使用了</p><p>但是这个输入区域无法接受输入, 也就是我们无法拿测试用例进行调试 <img src="'+v+'" alt="无法输入"></p><h3 id="解决输出区域无法输入的问题" tabindex="-1"><a class="header-anchor" href="#解决输出区域无法输入的问题" aria-hidden="true">#</a> 解决输出区域无法输入的问题</h3><p>我们将代码调试放在终端(之中,终端可以接受输入,就解决了这个问题</p><p>我们需要增加以下几条设置</p><p>首先, 打开setting.json</p><p><img src="'+b+'" alt=""></p><p>之后, 输入一条</p><p><code>&quot;code-runner.runInTerminal&quot;: true, </code></p><p><img src="'+x+'" alt=""></p><p><code>Ctrl + S</code> 保存后重启vscode, 重新运行代码, 可以看到已经可以输入了</p><p><img src="'+q+`" alt=""></p><h3 id="生成文件放在固定目录-减少硬盘占用" tabindex="-1"><a class="header-anchor" href="#生成文件放在固定目录-减少硬盘占用" aria-hidden="true">#</a> 生成文件放在固定目录,减少硬盘占用</h3><p>默认设置中,生成的文件和代码文件同目录, 也就是说,对于每一个代码,我们都要生成这么一个.exe文件</p><p>一个.cpp 代码文件一般不会超过5kb, 但是一个可执行文件一般是 1mb左右</p><p>这不但增加了磁盘空间的负担,同时也使我们文件管理非常的混乱</p><p>使用以下操作解决:</p><p>打开 <code>setting.json</code> 添加这几条内容</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>    &quot;terminal.integrated.shell.windows&quot;: &quot;C:\\\\WINDOWS\\\\System32\\\\cmd.exe&quot;,
    &quot;code-runner.executorMap&quot;: {
        &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ -o D:\\\\temp.exe \\&quot;$fileName\\&quot;  -std=c++11 &amp;&amp;  D:\\\\temp.exe&quot;
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些代码的意思:</p><ul><li>第一行表示指定使用的终端为cmd, win10默认使用的PowerShell 语法与Cmd 的语法不大相同,我们选择熟悉的Cmd</li><li>第二行表示执行代码是运行的命令,我们分开解析这条命令 <ul><li><code>cd $dir</code> , 进入代码所在的目录</li><li><code>g++ -o D:\\\\temp.exe \\&quot;$fileName\\&quot; -std=c++11 </code>, 使用c++11的标准编译你当前编辑的文件,然后生成可执行文件到 <code>D:\\\\temp.exe</code>, 可以更改为 <code>-std=c++14</code> 以使用更多特性, 或者更改 <code>D:\\\\temp.exe</code> 为你喜欢的路径</li><li><code>D:\\\\temp.exe</code> ,执行你生成好的可执行文件</li><li>其中<code>&amp;&amp;</code> 在c/c++语言中是且的意思, 也就是说, 执行完第一步 <code>cd $dir </code> 后, 我们才能安全的执行第二步操作,因此使用并且并且连接符</li></ul></li></ul><p>紧接着, 我们再添加以下内容:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>
    &quot;code-runner.preserveFocus&quot;: false,        
    &quot;code-runner.saveFileBeforeRun&quot;: true,
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>▲第一行: 运行后光标聚焦在终端 ▲第二行: 运行前自动保存文件</p><p>添加后的样子<img src="`+f+'" alt=""></p><p>接着,__重启__VsCode</p><p>已经可以使用了</p>',70),D=[C];function B(F,S){return c(),t("div",null,D)}const N=o(k,[["render",B],["__file","vscode替代codeblock.html.vue"]]);export{N as default};
