import{_ as n,o as s,c as a,d as t}from"./app-CFIaTHNp.js";const p="/assets/514935909278883-BhT2nmyc.png",e="/assets/27510892836406-v2Sc_vnK.png",o={},c=t(`<h1 id="graphql遇到过的问题" tabindex="-1"><a class="header-anchor" href="#graphql遇到过的问题" aria-hidden="true">#</a> graphql遇到过的问题</h1><h2 id="_1-schema编写问题" tabindex="-1"><a class="header-anchor" href="#_1-schema编写问题" aria-hidden="true">#</a> 1.schema编写问题</h2><p>正常情况下，需要在冒号右边加一个空格</p><div class="language-graphql line-numbers-mode" data-ext="graphql"><pre class="language-graphql"><code><span class="token keyword">type</span> <span class="token constant">XXX</span><span class="token punctuation">{</span>
    
    <span class="token attr-name">required</span><span class="token punctuation">:</span> <span class="token scalar">Boolean</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你不加的话，则会识别不到</p><blockquote><p>http://spec.graphql.org/October2021/#sec-Language <img src="`+p+'" alt=""></p></blockquote><p><img src="'+e+`" alt=""></p><h2 id="_2-dataload-问题" tabindex="-1"><a class="header-anchor" href="#_2-dataload-问题" aria-hidden="true">#</a> 2.dataload 问题</h2><p>当有一个数据的resolve字段没查到，则所有的数据都不会返回</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">scheme_by_scheme_ids</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scheme_ids<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> self<span class="token punctuation">.</span>repo<span class="token punctuation">.</span>new_session<span class="token punctuation">(</span>expire_on_commit<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        stmt <span class="token operator">=</span> self<span class="token punctuation">.</span>repo<span class="token punctuation">.</span>select<span class="token punctuation">(</span>MESSchemeOrm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>MESSchemeOrm<span class="token punctuation">.</span>scheme_id<span class="token punctuation">.</span>in_<span class="token punctuation">(</span>scheme_ids<span class="token punctuation">)</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> <span class="token keyword">await</span> self<span class="token punctuation">.</span>repo<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span>
        data <span class="token operator">=</span> result<span class="token punctuation">.</span>scalars<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> sort<span class="token punctuation">(</span>scheme_ids<span class="token punctuation">,</span> data<span class="token punctuation">,</span> key_fn<span class="token operator">=</span>attrgetter<span class="token punctuation">(</span><span class="token string">&quot;scheme_id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@field_resolver</span><span class="token punctuation">(</span><span class="token string">&quot;scheme&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">resolve_scheme</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> parent<span class="token punctuation">:</span> ProcessRepresentation<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> process_id <span class="token operator">:=</span> get_attr<span class="token punctuation">(</span>parent<span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        process_scheme_id <span class="token operator">=</span> SchemeId<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;scheme:process:info:</span><span class="token interpolation"><span class="token punctuation">{</span>process_id<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        loader <span class="token operator">=</span> info<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">&quot;domain_loaders&quot;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;scheme_by_scheme_ids&quot;</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> loader<span class="token punctuation">.</span>load<span class="token punctuation">(</span>process_scheme_id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),l=[c];function i(u,r){return s(),a("div",null,l)}const k=n(o,[["render",i],["__file","graphql遇到过的问题.html.vue"]]);export{k as default};
