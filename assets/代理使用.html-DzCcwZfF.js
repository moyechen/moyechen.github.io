import{_ as t,o as e,c as o,d as r}from"./app-CFIaTHNp.js";const a={},h=r('<h1 id="代理使用" tabindex="-1"><a class="header-anchor" href="#代理使用" aria-hidden="true">#</a> 代理使用</h1><h2 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h2><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h3><p>使用socks5 export http_proxy=&quot;socks5://127.0.0.1:10808&quot; export https_proxy=&quot;socks5://127.0.0.1:10808&quot; 使用http export http_proxy=&quot;http://127.0.0.1:10809&quot; export https_proxy=&quot;http://127.0.0.1:10809&quot; 指定不使用代理的域名和IP export no_proxy=&#39;a.test.com,127.0.0.1,192.168.0.0/16&#39;</p><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows" aria-hidden="true">#</a> Windows</h3><p>命令行 set http_proxy=&quot;http://127.0.0.1:10809&quot; set https_proxy=&quot;http://127.0.0.1:10809&quot; 或者在系统设置里设环境变量 http_proxy | http://127.0.0.1:10809 https_proxy | http://127.0.0.1:10809</p><h2 id="ubuntu-apt" tabindex="-1"><a class="header-anchor" href="#ubuntu-apt" aria-hidden="true">#</a> Ubuntu apt</h2><p>sudo tee /etc/apt/apt.conf.d/proxy.conf &lt;&lt; EOF Acquire { HTTP::proxy &quot;http://127.0.0.1:10809&quot;; HTTPS::proxy &quot;http://127.0.0.1:10809&quot;; } EOF</p><h2 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> Git</h2><p>HTTP方式访问 git config --global http.proxy &#39;socks5://127.0.0.1:10808&#39; git config --global https.proxy &#39;socks5://127.0.0.1:10808&#39;</p><p>SSH方式访问，以github.com为例 ~/.ssh/config Host github.com # Mac/Ubuntu下，使用socks5 ProxyCommand nc -X 5 -x 127.0.0.1:10808 %h %p</p><h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h2><p>Ubuntu下修改 /etc/default/docker CentOS下修改 /etc/sysconfig/docker export http_proxy=&quot;http://127.0.0.1:10809&quot; export https_proxy=&quot;http://127.0.0.1:10809&quot; export no_proxy=&#39;a.test.com,127.0.0.1,192.168.0.0/16&#39; 重启docker后，运行docker info检查</p><h2 id="python代码" tabindex="-1"><a class="header-anchor" href="#python代码" aria-hidden="true">#</a> Python代码</h2><p>通过requests模块使用 proxies={ &#39;http&#39;: &#39;http://127.0.0.1:10809&#39;, &#39;https&#39;: &#39;http://127.0.0.1:10809&#39; }</p><p>r = requests.get(url, proxies=proxies)</p><p>r = requests.post(url, headers=headers, json=payload, proxies=proxies)</p><h2 id="浏览器插件" tabindex="-1"><a class="header-anchor" href="#浏览器插件" aria-hidden="true">#</a> 浏览器插件</h2><p>推荐使用SwitchyOmega，支持Chrome/Edge/Firefox。 首先配置一个场景模式，命名为proxy或任何你喜欢的名字，在里面添加SOCKS5或者HTTP代理，还可以手动添加你不想代理的地址列表，如内网IP段/指定域名等：</p><p>在auto switch中添加规则列表，并让规则列表默认走上面配置的proxy场景： https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</p><p>选择auto switch的场景模式，此时只有规则列表里的域名会走代理：</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>常用包管理器的代理设置：https://github.com/comwrg/package-manager-proxy-settings</p>',23),p=[h];function s(i,d){return e(),o("div",null,p)}const n=t(a,[["render",s],["__file","代理使用.html.vue"]]);export{n as default};
