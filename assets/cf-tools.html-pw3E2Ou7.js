import{_ as t,a as o}from"./20200216004851429_31590-CNIZ4Se5.js";import{_ as n,r as a,o as l,c as p,b as c,a as e,e as i,d}from"./app-CFIaTHNp.js";const r="/assets/20200216005034283_6861-CGhUdO8L.png",u="/assets/20200216003909531_3860-p36nNjJI.png",m="/assets/20200216003958555_8778-C_2UmD4F.png",f="/assets/20200216001653735_883-hA2Slynl.png",h="/assets/20200216005527217_28042-CFEyrIIA.png",_="/assets/20200216010453980_27238-CFO8keWW.png",g="/assets/20200216010203757_32340-BWiYmUov.png",b="/assets/20200216010658929_2127-D6ZAFA8C.png",v="/assets/20200216011139813_4073-IWbiO3-Z.png",x="/assets/20200216011249181_32265-p0LnpqIn.png",w="/assets/20200216012809191_27147-ByOS7b8R.png",q="/assets/20200216015749119_31992-BcCUg927.png",$="/assets/20200216020006936_26223-DqepvaAt.png",y="/assets/20200216020115513_27857-Daor10mm.png",k="/assets/20200216020714652_5899-C-xkSL0W.png",I="/assets/20200216020814094_3886-BjWyi_gM.png",D={},C=e("h1",{id:"cf-tools",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cf-tools","aria-hidden":"true"},"#"),c(" cf-tools")],-1),E=e("div",{style:{float:"right"}},[e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"时间"),e("th",null,"作者")])]),e("tbody",null,[e("tr",null,[e("td",null,"2020/2/16 0:43"),e("td",null,"moyechen")])])])],-1),N={href:"https://github.com/xalanq/cf-tool/",target:"_blank",rel:"noopener noreferrer"},W=e("p",null,"cf-tool 是 Codeforces 的命令行界面的跨平台（支持 Windows、Linux、OS X）工具，其支持很多常用操作。",-1),B=e("h3",{id:"cf-tool下载",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cf-tool下载","aria-hidden":"true"},"#"),c(" cf-tool下载")],-1),L={href:"https://github.com/xalanq/cf-tool/releases",target:"_blank",rel:"noopener noreferrer"},U=d('<p>之后的更新可以直接使用 upgrade 命令获取。</p><h3 id="windows准备工作" tabindex="-1"><a class="header-anchor" href="#windows准备工作" aria-hidden="true">#</a> windows准备工作</h3><p>你的电脑需要编译器才能调试你编写的代码</p><p>对于c/cpp, 我们需要g++这款编译器 如果你拥有自带mingw的code:block这款IDE, 可以从如下位置找到 <img src="'+r+'" alt=""><img src="'+u+'" alt="2"><img src="'+m+'" alt=""></p><p>▲将第三张图片红框中的路径复制下来, 记做<code>compiler_path</code></p><p>将这个路径添加到环境变量中,什么,你还不会添加路径到环境变量? 点击以获得讲解</p><p>否则,可以访问 https://www.jianshu.com/p/ff24a81f3637 ,参考教程下载g++编译器</p><h4 id="测试编译器是否可用" tabindex="-1"><a class="header-anchor" href="#测试编译器是否可用" aria-hidden="true">#</a> 测试编译器是否可用</h4><p>按住win键,然后输入r,在弹出的框中输入cmd <img src="'+t+'" alt=""></p><p>此时会打开一个黑框框</p><p>输入g++</p><p>如果出现下图,这说明编译器准备完毕</p><p><img src="'+o+'" alt=""></p><h4 id="添加cf-exe到环境变量" tabindex="-1"><a class="header-anchor" href="#添加cf-exe到环境变量" aria-hidden="true">#</a> 添加cf.exe到环境变量</h4><p>首先先将下载到的cf.exe文件放到一个合适的目录</p><p>右击 我的电脑,在弹出的下来框中选择 属性 这个选项 然后按下图操作</p><p><img src="'+f+'" alt=""></p><p>至此, 打开cmd,输入cf,如果显示以下内容,即为cf 环境变量配置成功</p><p><img src="'+h+`" alt=""></p><h3 id="linux-准备工作" tabindex="-1"><a class="header-anchor" href="#linux-准备工作" aria-hidden="true">#</a> LINUX 准备工作</h3><h4 id="准备cf" tabindex="-1"><a class="header-anchor" href="#准备cf" aria-hidden="true">#</a> 准备cf</h4><p>将下载到cf 文件放在合适的目录,进入这个目录</p><p>执行以下命令,给予执行权限并创建软连接</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token function">chmod</span> <span class="token number">775</span> ./cf
<span class="token function">ln</span> ./cf /usr/bin/cf

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入cf 出现下图则成功</p><p><img src="`+_+'" alt=""></p><h4 id="linux测试g-编译器是否可用" tabindex="-1"><a class="header-anchor" href="#linux测试g-编译器是否可用" aria-hidden="true">#</a> linux测试g++编译器是否可用</h4><p>输入g++,出现下图,则为正常</p><p><img src="'+g+'" alt=""></p><p>如果没有, 请自行安装g++编译器</p><h2 id="配置cf" tabindex="-1"><a class="header-anchor" href="#配置cf" aria-hidden="true">#</a> 配置cf</h2><p>终于将准备工作做完了</p><p>我们可以开始配置了</p><p>windows用户请打开cmd linxu 用户请进入shell</p><p>下图是我在linux的终端上操作的,windows和linux通用</p><p>输入以下命令 <code>cf config</code></p><p><img src="'+b+'" alt=""></p><ol start="0"><li>username and password &gt; 这个是用来配置用户名以及密码</li><li>add a template &gt; 添加一个代码模板,可以指定语言</li><li>delete a template &gt; 删除一个模板</li><li>设置默认模板</li><li>在解析题目结束后,自动生成模板代码</li><li>设置网站主体, 比如在中国我们可以设置为镜像站 <code>https://codeforces.ml</code> 以获得更好的体验</li></ol><p>我们选择1 <img src="'+v+'" alt=""></p><p>然后选择你要使用的编译器, 这里我们使用42号编译器 <code>GNU G++11 5.1.0</code></p><p>紧接着 <img src="'+x+`" alt=""></p><p>可以看到, cf-tool 提供了一些变量,比如 年月日, 以及你的用户名</p><p>这里我提供一个模板</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include&lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;

/*
$%U%$
$%Y%$-$%M%$-$%D%$  $%h%$:$%m%$
*/

const int maxn = 5e5 + 5;
const int inf  = 0x3f3f3f3f;


int main() {
    std::ios::sync_with_stdio(false);
    cin.tie(0);

    return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你只需要复制到一个地方,然后记住他的绝对路径,并输入即可 例如:</p><ul><li><code>~/template.cpp</code> (适用于linux)</li><li><code>D:/template.cpp</code> (适用于windows,需要带上盘符)</li></ul><p><img src="`+w+`" alt=""></p><p>在输入后, 配置程序给了几个询问,我来分别做以下解释</p><ol><li><p>The suffix of template above will be added by default. Other suffix? (e.g. &quot;cxx cc&quot;), empty is ok:</p><p>默认情况下，将添加上面模板的后缀。 需要添加其他后缀吗？（例如，“cxx cc”），空的也是可以：</p><p>这里我们不需要了,所以直接回车</p></li><li><p>Template&#39;s alias (e.g. &quot;cpp&quot; &quot;py&quot;):</p><p>模板别名,因为我们用的是cpp, 因此我输入了cpp, 别名在使用 cf gen 生成模板代码时可以用到, 比如输入cf gen cpp, 就会生成我们刚刚添加的模板</p></li><li><p>Script in template: Template will run 3 scripts in sequence when you run &quot;cf test&quot;:</p><pre><code>- before_script   (execute once)
 - script          (execute the number of samples times)
 - after_script    (execute once)
</code></pre><p>You could set &quot;before_script&quot; or &quot;after_script&quot; to empty string, meaning not executing. You have to run your program in &quot;script&quot; with standard input/output (no need to redirect).</p><p>You can insert some placeholders in your scripts. When execute a script, cf will replace all placeholders by following rules:</p><p>$%path%$ Path to source file (Excluding $%full%$, e.g. &quot;/home/xalanq/&quot;) $%full%$ Full name of source file (e.g. &quot;a.cpp&quot;) $%file%$ Name of source file (Excluding suffix, e.g. &quot;a&quot;) $%rand%$ Random string with 8 character (including &quot;a-z&quot; &quot;0-9&quot;)</p><p>这一段讲的是工具的运作原理</p><p>在你输入cf test之后</p><ul><li>首先工具执行你输入的 <code>before_script</code> 脚本, 例如 <code>g++ $%full%$ -o /tmp/a.out -std=c++11</code>, 来编译代码,并生成到<code>/tmp/a.out</code></li><li>然后执行 你输入的script脚本, 例如<code>/tmp/a.out </code> ,这代表执行这个刚刚编译好的程序, (ps, 这一步 是用来执行程序的)</li><li>接下来执行你输入的<code>after_script</code>脚本,例如执行 <code>rm $%file%$.exe</code> 以将刚刚编译好的程序删除, 防止占用硬盘空间(ps. 一般来说,acm的代码不超过5kb, 但是编译好的控制台应用程序一般在1mb左右, 但是这个程序我们只用一次,比较浪费空间,因此可以在执行后删除)</li></ul><p>下面我讲解一下我的输入</p><ul><li>对于第一个问题<code>before_script</code> .我的回答是 <code>g++ $%full%$ -o /tmp/a.out -std=c++11</code>, 我每次都生成到同一个地方, 这次生成的会覆盖掉上次生成的, 也不需要删除了,其中 <code>/tmp/a.out</code> 是一个生成的路径, <code>-std=c++11</code> 是执行的c++标准, 我们可以改为<code>-std=c++14</code> 或者 <code>-std=c++17</code>以享用新特性 <ul><li>在windows上,路径可以更改为 <code>D:/tmp.exe</code> 等等等等,需要加上盘符</li></ul></li><li>对于第二个问题<code>script</code> . 我的回答是 <code>/tmp/a.out</code>, 无论是linux 还是windows ,都需要写的是生成的文件的绝对路径</li><li>第三个问题<code> after_script</code> .我们不需要任何处理,因此,直接回车</li></ul></li></ol><p>最后,它询问我是否作为默认设置, 输入 <code>y</code> 确认</p><p>至此, 配置结束</p><h2 id="简单的流程" tabindex="-1"><a class="header-anchor" href="#简单的流程" aria-hidden="true">#</a> 简单的流程</h2><p>准备比赛了, 首先拿到比赛编号,</p><p><img src="`+q+'" alt=""></p><p>▲可以在url中看到比赛编号</p><p>控制台输入 <code>cf race 比赛编号</code></p><p>▼它就会为你解析比赛测试样例,并打开题面网站</p><p><img src="'+$+'" alt=""></p><p>▼如果比赛未开始,他会自动等待,然后在开始的一瞬间为你解析数据</p><p><img src="'+y+'" alt=""></p><p>然后使用<code>cd</code>命令切换到比赛目录,并进入a题文件夹</p><p><code>cd 比赛编号\\a</code></p><p>使用<code>cf gen</code>命令生成一个模板</p><p>你可以使用别名,这样根据你对应的模板生成代码 <code>cf gen cpp</code></p><p>然后开始编写你的代码:</p><ul><li>在linux 上 : <code>vim a.cpp</code></li><li>在windows上: 如果装有vscode ,则可以使用<code>code -r a.cpp</code>,否则, 可以使用<code>notepad a.cpp</code>使用记事本,当然,你也可以在你的IDE中添加这个文件夹,以使用IDE编写代码</li></ul><p>编写结束 使用<code>cf test</code>测试样例数据 <img src="'+k+'" alt=""></p><p>很好, 样例过了</p><p>使用<code>cf submit</code>提交你所在目录的题目</p><p><img src="'+I+'" alt=""></p><p>过题,</p><p>然后使用cd命令切换到其他题目的目录, 继续重复操作</p>',72);function O(S,A){const s=a("ExternalLinkIcon");return l(),p("div",null,[C,E,c(" ## 下载&准备工作 "),e("p",null,[c("GitHub 地址： "),e("a",N,[c("xalanq/cf-tool"),i(s)])]),W,B,e("p",null,[c("前往 "),e("a",L,[c("cf-tool/releases"),i(s)]),c(" 下载最新版。")]),U])}const Y=n(D,[["render",O],["__file","cf-tools.html.vue"]]);export{Y as default};
